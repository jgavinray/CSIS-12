1.2.1 Section Review	-	J. Gavin Ray (5/9/2012)

1.	While previous to reading this I would have considered a vitural
	machine something that emulates hardware so that an OS can be
	run independantly of the native one.  As defined in the book a
	virtual machine can be described like a translator to machine
	language.  For example Virtual Machine 0 would be the equivelant
	of native machine language.  Virtual Machine 1 would be the 
	interpreter of Assembly into Machine language.  Virtual Machine 2
	would translate a high level language like C into Assembly, in which
	case VM1 translates the Assembly to Machine Language.  This is by
	no means a detailed or 100% accurate representation, but is enough
	to gather the concept as defined by the text.
2.	Programmers don't program in machine language because it is enormously
	detailed, and consists pureply of numbers.  Even if it was possible
	to reach machine language fluently, the amount of time spent writing
	statements of logic for the machine to function would take far far
	longer than using a high level language.
3.	True - Interpretation:  As the L1 program is running, each of its 
	instructions could be decoded and executed by a program written in
	language L0.  The L1 program begins running immediately, but each
	instruction has to be decoded before it can execute.
4.	Translation:  A program could be converted into a lower level program
	by a lower level program specifically designed for this purpose.  Then
	the resulting translated program can be put through another translation
	program, or if low enough executed directly on the hardware.
5.	As defined in Figure 1-1 "Virtual Machine Levels", Assembly language
	is listed as Level 3 above Instruction Set Architecture  and Digital 
	Logic.	
